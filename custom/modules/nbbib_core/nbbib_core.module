<?php

/**
 * @file
 * Contains nbbib_core.module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Cache\RefinableCacheableDependencyInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Messenger\MessengerInterface;
use Drupal\Core\Queue\QueueFactory;
use Drupal\Core\Queue\QueueInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\search_api\Entity\Index;
use Drupal\taxonomy\Entity\Term;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use Drupal\yabrm\Entity\BibliographicContributor;

/**
 * Implements hook_cron().
 */
function nbbib_core_cron() {
  // Get current time.
  $current_year = date('Y');
  $current_hour = date('G');
  $current_minute = date('i');
  $datestamp = date('c');

  // if (TRUE) { // CRON DEV - RUN EVERY TIME!
  // If it's between 12:45-1am server time...
  if ($current_hour < 1 and $current_minute > 44) {
    \Drupal::logger('nbbib_core')->notice("NBBIB maintenance CRON job started at [$datestamp].");
    // Publication year config sync.
    \Drupal::logger('nbbib_core')->notice("Starting publication year facet sync...");
    $query = \Drupal::database()->query(
      'SELECT MIN(publication_year) AS db_min
      FROM (
      SELECT publication_year FROM yabrm_book t1 WHERE publication_year > 0 AND status = 1
      UNION
      SELECT publication_year FROM yabrm_journal_article t2 WHERE publication_year > 0 AND status = 1
      UNION
      SELECT publication_year FROM yabrm_book_section t3 WHERE publication_year > 0 AND status = 1
      UNION
      SELECT publication_year FROM yabrm_thesis t4 WHERE publication_year > 0 AND status = 1
      ) AS t5'
    );
    $db_min = $query->fetchAll()[0]->db_min;
    $dt_max = date('Y');
    // Check/configure new edge values for facet.
    $config = \Drupal::service('config.factory')->getEditable('facets.facet.publication_year');
    $widget = $config->get('widget');
    if ($db_min) {
      $widget['config']['min_value'] = $db_min;
    }
    $widget['config']['max_value'] = $dt_max;
    $config->set('widget', $widget);
    $config->save();
    \Drupal::logger('nbbib_core')->notice("Publication year facet range set [$db_min-$dt_max]");

    // Cleanup orphan contributors.
    \Drupal::logger('nbbib_core')->notice("Starting orphan contributor cleanup...");
    // Get all contributor ids with no matching contributor paragraphs.
    $query = \Drupal::database()->query(
      'SELECT id
      FROM yabrm_contributor
      WHERE id NOT IN (
      SELECT field_yabrm_contributor_person_target_id 
      FROM paragraph__field_yabrm_contributor_person
      WHERE entity_id IN (
      SELECT id 
      FROM paragraphs_item_field_data
      WHERE status = 1
      ))'
    );
    $contribs = $query->fetchAll();
    $contrib_no = count($contribs);
    // If orphans found...
    if ($contrib_no) {
      \Drupal::logger('nbbib_core')->notice("Found [$contrib_no] orphan contributors.");
      // Call contrib cleanup queue.
      /** @var QueueFactory $queue_factory */
      $queue_factory = \Drupal::service('queue');
      /** @var QueueInterface $queue */
      $queue = $queue_factory->get('contrib_cleanup');
      // Pass each contrib id to cleanup queue.
      foreach ($contribs as $contrib) {
        $item = new \stdClass();
        $item->cid = $contrib->id;
        $queue->createItem($item);
      }
    }
    else {
      \Drupal::logger('nbbib_core')->notice("No orphan contributors found.");
    }

    // Cleanup orphan topics.
    // Unpublish.
    \Drupal::logger('nbbib_core')->notice("Starting orphan topic term cleanup (unpublish)...");
    $query = \Drupal::database()->query(
      "SELECT tid
      FROM taxonomy_term_field_data
      WHERE vid = 'yabrm_reference_topic'
      AND status = 1
      AND tid NOT IN (SELECT topics_target_id FROM yabrm_book__topics WHERE entity_id in (SELECT id FROM yabrm_book WHERE status = 1))
      AND tid NOT IN (SELECT topics_target_id FROM yabrm_book_section__topics WHERE entity_id in (SELECT id FROM yabrm_book_section WHERE status = 1))
      AND tid NOT IN (SELECT topics_target_id FROM yabrm_journal_article__topics WHERE entity_id in (SELECT id FROM yabrm_journal_article WHERE status = 1))
      AND tid NOT IN (SELECT topics_target_id FROM yabrm_thesis__topics WHERE entity_id in (SELECT id FROM yabrm_thesis WHERE status = 1))"
    );

    $topics = $query->fetchAll();
    $topic_no = count($topics);

    // If orphans found...
    if ($topic_no) {
      \Drupal::logger('nbbib_core')->notice("Found [$topic_no] orphan topics (unpublish).");

      // Call topics cleanup queue.
      /** @var QueueFactory $queue_factory */
      $queue_factory = \Drupal::service('queue');
      /** @var QueueInterface $queue */
      $queue = $queue_factory->get('topic_cleanup');

      // Pass each contrib id to cleanup queue (unpublish).
      foreach ($topics as $topic) {
        $item = new \stdClass();
        $item->tid = $topic->tid;
        $queue->createItem($item);
      }
    }
    else {
      \Drupal::logger('nbbib_core')->notice("No orphan topics found (unpublish).");
    }
    // Delete.
    \Drupal::logger('nbbib_core')->notice("Starting orphan topic term cleanup (delete)...");
    $query = \Drupal::database()->query(
      "SELECT tid
      FROM taxonomy_term_field_data
      WHERE vid = 'yabrm_reference_topic'
      AND status = 1
      AND tid NOT IN (SELECT topics_target_id FROM yabrm_book__topics)
      AND tid NOT IN (SELECT topics_target_id FROM yabrm_book_section__topics)
      AND tid NOT IN (SELECT topics_target_id FROM yabrm_journal_article__topics)
      AND tid NOT IN (SELECT topics_target_id FROM yabrm_thesis__topics)"
    );

    $topics = $query->fetchAll();
    $topic_no = count($topics);

    // If orphans found...
    if ($topic_no) {
      \Drupal::logger('nbbib_core')->notice("Found [$topic_no] orphan topics (delete).");

      // Call topics cleanup queue (delete).
      /** @var QueueInterface $queue */
      $queue = $queue_factory->get('topic_cleanup_hard');

      // Pass each contrib id to cleanup queue.
      foreach ($topics as $topic) {
        $item = new \stdClass();
        $item->tid = $topic->tid;
        $queue->createItem($item);
      }
    }
    else {
      \Drupal::logger('nbbib_core')->notice("No orphan topics found (delete).");
    }

    // Cleanup orphan archives.
    // Unpublish.
    \Drupal::logger('nbbib_core')->notice("Starting orphan archive term cleanup (unpublish)...");
    $query = \Drupal::database()->query(
      "SELECT tid
      FROM taxonomy_term_field_data
      WHERE vid = 'nbbib_archives'
      AND status = 1
      AND tid NOT IN (SELECT archive_target_id FROM yabrm_book__archive WHERE entity_id in (SELECT id FROM yabrm_book WHERE status = 1))
      AND tid NOT IN (SELECT archive_target_id FROM yabrm_book_section__archive WHERE entity_id in (SELECT id FROM yabrm_book_section WHERE status = 1))
      AND tid NOT IN (SELECT archive_target_id FROM yabrm_journal_article__archive WHERE entity_id in (SELECT id FROM yabrm_journal_article WHERE status = 1))
      AND tid NOT IN (SELECT archive_target_id FROM yabrm_thesis__archive WHERE entity_id in (SELECT id FROM yabrm_thesis WHERE status = 1))"
    );

    $archives = $query->fetchAll();
    $archive_no = count($archives);

    // If orphans found...
    if ($archive_no) {
      \Drupal::logger('nbbib_core')->notice("Found [$archive_no] orphan archives (unpublish).");

      // Call topics cleanup queue (unpublish).
      /** @var QueueFactory $queue_factory */
      $queue_factory = \Drupal::service('queue');
      /** @var QueueInterface $queue */
      $queue = $queue_factory->get('archive_cleanup');

      // Pass each contrib id to cleanup queue (unpublish).
      foreach ($archives as $archive) {
        $item = new \stdClass();
        $item->tid = $archive->tid;
        $queue->createItem($item);
      }
    }
    else {
      \Drupal::logger('nbbib_core')->notice("No orphan archives found (unpublish).");
    }
    // Delete.
    \Drupal::logger('nbbib_core')->notice("Starting orphan archive term cleanup (delete)...");
    $query = \Drupal::database()->query(
      "SELECT tid
      FROM taxonomy_term_field_data
      WHERE vid = 'nbbib_archives'
      AND status = 1
      AND tid NOT IN (SELECT archive_target_id FROM yabrm_book__archive)
      AND tid NOT IN (SELECT archive_target_id FROM yabrm_book_section__archive)
      AND tid NOT IN (SELECT archive_target_id FROM yabrm_journal_article__archive)
      AND tid NOT IN (SELECT archive_target_id FROM yabrm_thesis__archive)"
    );

    $archives = $query->fetchAll();
    $archive_no = count($archives);

    // If orphans found...
    if ($archive_no) {
      \Drupal::logger('nbbib_core')->notice("Found [$archive_no] orphan archives (delete).");

      // Call topics cleanup queue (delete).
      $queue = $queue_factory->get('archive_cleanup_hard');

      // Pass each contrib id to cleanup queue.
      foreach ($archives as $archive) {
        $item = new \stdClass();
        $item->tid = $archive->tid;
        $queue->createItem($item);
      }
    }
    else {
      \Drupal::logger('nbbib_core')->notice("No orphan archives found (delete).");
    }
  }
  else {
    \Drupal::logger('nbbib_core')->notice("No cleanup tasks ran at this time.");
  }
}

/**
 * Implements hook_theme().
 */
function nbbib_core_theme($existing, $type, $theme, $path) {
  return [
    'nbbib_intro' => [
      'variables' => [],
    ],
    'nbbib_about' => [
      'variables' => [],
    ],
  ];
}

/**
 * Implements hook_page_attachments().
 */
function nbbib_core_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'nbbib_core/navbar-active';
  $current_route = \Drupal::routeMatch()->getRouteName();

  if($current_route === 'nbbib_core.bibliography') {
    // Attach custom facet feature to Bibliography view.
    $attachments['#attached']['library'][] = 'nbbib_core/facet-hard-limit-plus';
  }
  if (!\Drupal::currentUser()->hasPermission('access toolbar')) {
    return;
  }

  $attachments['#attached']['library'][] = 'nbbib_core/toolbar-overrides';
}

/**
 * Implements hook_entity_field_access().
 */

function nbbib_core_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
  $result = AccessResult::neutral();

  // Prevent non-archival record editors from modifying BibliographicContributor.archival entity reference field.  
  $field = $field_definition->getName();
  
  if ($field == 'archival' or $field == 'archival_note') {
    if ($operation != 'view' and !in_array('nbbib_archivals_editor', $account->getRoles())) {
      $result = AccessResult::forbidden();
    }
  }

  return $result->addCacheContexts(['user.roles:nbbib_archivals_editor']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nbbib_core_form_views_exposed_form_alter(&$form, $form_state, $form_id) {
  // Target specific exposed form.
  if ($form['#id'] == "views-exposed-form-nb-bibliography-lister-page-1") {
    // Override published input for better readability.
    $form['published']['#options']['1'] = 'Yes';
    $form['published']['#options']['0'] = 'No';
  }
  if ($form['#id'] == "views-exposed-form-nb-bibliography-contributor-lister-page-1") {
    // Override published input for better readability.
    $form['status']['#options']['1'] = 'Yes';
    $form['status']['#options']['0'] = 'No';
  }  
  if ($form['#id'] == "views-exposed-form-nb-bibliography-citations-page-1") {
    // Display reset button if either Search API or facet input is present. 
    $input = $form_state->getUserInput();
    $form['actions']['reset']['#access'] = (isset($input['search_api_fulltext']) or 
      isset($input['f']));
  }
}

/**
 * Implements hook_views_query_alter().
 * Sanitizes values passed to topic exposed filter.
 * Adds published filter for contributors view only if user is not editor.
 */
function nbbib_core_views_query_alter($view, $query) {
  if ($view->id() == 'nb_bibliography_citations' && 
    isset($view->exposed_raw_input['topic_names']) && 
    $view->exposed_raw_input['topic_names'] > 0) {
    // Traverse through the 'where' part of the query.
    $where = &$query->getWhere();
    foreach ($where as &$condition_group) {
      foreach ($condition_group['conditions'] as &$condition) {
        // If this is the part of the query filtering on topic, change the
        // condition to filter by clean topic_names.
        if ($condition[0] == 'topic_names') {
          $condition = [
            'topic_names',
            strclean($view->exposed_raw_input['topic_names']),
            '=',
          ];
        }
      }
    }
  }
  try {
    $userCurrent = \Drupal::currentUser();
    $uid = $userCurrent->id();
    // For non-editor users…
    if ($view->id() === 'nb_bibliography_citations' and $view->getTitle() === 'page_3' and !$userCurrent->hasRole('nb_bibliography_contributor')) {
      // …add a WHERE condition to only display published content.
      $query->addWhere(0, 'status', TRUE);
    }
  }
  catch (Error $e) {
    drupal_set_message('The server encountered a problem. Please contact the site\'s administrator.', 'error');
    \Drupal::logger('nbbib_core')->error("Error adding filter to view in nbbib_core.module : %e",
      ['%e' => $e]
    );
    return;
  }
}

/**
 * Returns a string decomposing/replacing altered/special characters. 
 */
function strclean($string) {
  // Implementation of WordPress decomposition method.
  if (preg_match('/[\x80-\xff]/', $string) ) {
    $chars = array(
    // Decompositions for Latin-1 Supplement
    chr(195).chr(128) => 'A', chr(195).chr(129) => 'A',
    chr(195).chr(130) => 'A', chr(195).chr(131) => 'A',
    chr(195).chr(132) => 'A', chr(195).chr(133) => 'A',
    chr(195).chr(135) => 'C', chr(195).chr(136) => 'E',
    chr(195).chr(137) => 'E', chr(195).chr(138) => 'E',
    chr(195).chr(139) => 'E', chr(195).chr(140) => 'I',
    chr(195).chr(141) => 'I', chr(195).chr(142) => 'I',
    chr(195).chr(143) => 'I', chr(195).chr(145) => 'N',
    chr(195).chr(146) => 'O', chr(195).chr(147) => 'O',
    chr(195).chr(148) => 'O', chr(195).chr(149) => 'O',
    chr(195).chr(150) => 'O', chr(195).chr(153) => 'U',
    chr(195).chr(154) => 'U', chr(195).chr(155) => 'U',
    chr(195).chr(156) => 'U', chr(195).chr(157) => 'Y',
    chr(195).chr(159) => 's', chr(195).chr(160) => 'a',
    chr(195).chr(161) => 'a', chr(195).chr(162) => 'a',
    chr(195).chr(163) => 'a', chr(195).chr(164) => 'a',
    chr(195).chr(165) => 'a', chr(195).chr(167) => 'c',
    chr(195).chr(168) => 'e', chr(195).chr(169) => 'e',
    chr(195).chr(170) => 'e', chr(195).chr(171) => 'e',
    chr(195).chr(172) => 'i', chr(195).chr(173) => 'i',
    chr(195).chr(174) => 'i', chr(195).chr(175) => 'i',
    chr(195).chr(177) => 'n', chr(195).chr(178) => 'o',
    chr(195).chr(179) => 'o', chr(195).chr(180) => 'o',
    chr(195).chr(181) => 'o', chr(195).chr(182) => 'o',
    chr(195).chr(182) => 'o', chr(195).chr(185) => 'u',
    chr(195).chr(186) => 'u', chr(195).chr(187) => 'u',
    chr(195).chr(188) => 'u', chr(195).chr(189) => 'y',
    chr(195).chr(191) => 'y',
    // Decompositions for Latin Extended-A
    chr(196).chr(128) => 'A', chr(196).chr(129) => 'a',
    chr(196).chr(130) => 'A', chr(196).chr(131) => 'a',
    chr(196).chr(132) => 'A', chr(196).chr(133) => 'a',
    chr(196).chr(134) => 'C', chr(196).chr(135) => 'c',
    chr(196).chr(136) => 'C', chr(196).chr(137) => 'c',
    chr(196).chr(138) => 'C', chr(196).chr(139) => 'c',
    chr(196).chr(140) => 'C', chr(196).chr(141) => 'c',
    chr(196).chr(142) => 'D', chr(196).chr(143) => 'd',
    chr(196).chr(144) => 'D', chr(196).chr(145) => 'd',
    chr(196).chr(146) => 'E', chr(196).chr(147) => 'e',
    chr(196).chr(148) => 'E', chr(196).chr(149) => 'e',
    chr(196).chr(150) => 'E', chr(196).chr(151) => 'e',
    chr(196).chr(152) => 'E', chr(196).chr(153) => 'e',
    chr(196).chr(154) => 'E', chr(196).chr(155) => 'e',
    chr(196).chr(156) => 'G', chr(196).chr(157) => 'g',
    chr(196).chr(158) => 'G', chr(196).chr(159) => 'g',
    chr(196).chr(160) => 'G', chr(196).chr(161) => 'g',
    chr(196).chr(162) => 'G', chr(196).chr(163) => 'g',
    chr(196).chr(164) => 'H', chr(196).chr(165) => 'h',
    chr(196).chr(166) => 'H', chr(196).chr(167) => 'h',
    chr(196).chr(168) => 'I', chr(196).chr(169) => 'i',
    chr(196).chr(170) => 'I', chr(196).chr(171) => 'i',
    chr(196).chr(172) => 'I', chr(196).chr(173) => 'i',
    chr(196).chr(174) => 'I', chr(196).chr(175) => 'i',
    chr(196).chr(176) => 'I', chr(196).chr(177) => 'i',
    chr(196).chr(178) => 'IJ',chr(196).chr(179) => 'ij',
    chr(196).chr(180) => 'J', chr(196).chr(181) => 'j',
    chr(196).chr(182) => 'K', chr(196).chr(183) => 'k',
    chr(196).chr(184) => 'k', chr(196).chr(185) => 'L',
    chr(196).chr(186) => 'l', chr(196).chr(187) => 'L',
    chr(196).chr(188) => 'l', chr(196).chr(189) => 'L',
    chr(196).chr(190) => 'l', chr(196).chr(191) => 'L',
    chr(197).chr(128) => 'l', chr(197).chr(129) => 'L',
    chr(197).chr(130) => 'l', chr(197).chr(131) => 'N',
    chr(197).chr(132) => 'n', chr(197).chr(133) => 'N',
    chr(197).chr(134) => 'n', chr(197).chr(135) => 'N',
    chr(197).chr(136) => 'n', chr(197).chr(137) => 'N',
    chr(197).chr(138) => 'n', chr(197).chr(139) => 'N',
    chr(197).chr(140) => 'O', chr(197).chr(141) => 'o',
    chr(197).chr(142) => 'O', chr(197).chr(143) => 'o',
    chr(197).chr(144) => 'O', chr(197).chr(145) => 'o',
    chr(197).chr(146) => 'OE',chr(197).chr(147) => 'oe',
    chr(197).chr(148) => 'R',chr(197).chr(149) => 'r',
    chr(197).chr(150) => 'R',chr(197).chr(151) => 'r',
    chr(197).chr(152) => 'R',chr(197).chr(153) => 'r',
    chr(197).chr(154) => 'S',chr(197).chr(155) => 's',
    chr(197).chr(156) => 'S',chr(197).chr(157) => 's',
    chr(197).chr(158) => 'S',chr(197).chr(159) => 's',
    chr(197).chr(160) => 'S', chr(197).chr(161) => 's',
    chr(197).chr(162) => 'T', chr(197).chr(163) => 't',
    chr(197).chr(164) => 'T', chr(197).chr(165) => 't',
    chr(197).chr(166) => 'T', chr(197).chr(167) => 't',
    chr(197).chr(168) => 'U', chr(197).chr(169) => 'u',
    chr(197).chr(170) => 'U', chr(197).chr(171) => 'u',
    chr(197).chr(172) => 'U', chr(197).chr(173) => 'u',
    chr(197).chr(174) => 'U', chr(197).chr(175) => 'u',
    chr(197).chr(176) => 'U', chr(197).chr(177) => 'u',
    chr(197).chr(178) => 'U', chr(197).chr(179) => 'u',
    chr(197).chr(180) => 'W', chr(197).chr(181) => 'w',
    chr(197).chr(182) => 'Y', chr(197).chr(183) => 'y',
    chr(197).chr(184) => 'Y', chr(197).chr(185) => 'Z',
    chr(197).chr(186) => 'z', chr(197).chr(187) => 'Z',
    chr(197).chr(188) => 'z', chr(197).chr(189) => 'Z',
    chr(197).chr(190) => 'z', chr(197).chr(191) => 's'
    );
    
    $string = strtr($string, $chars);
  }
  $string = str_replace('-', ' ', $string); // Replaces all hyphens with spaces.
  // Removes special chars, escapes spaces.
  return preg_replace('/[^A-Za-z0-9\s]/', '', $string);
} 

/**
 * Implements hook_form_FORM_ID_alter().
 * Overrides contrib delete/cancel redirects.
 */
function nbbib_core_form_yabrm_contributor_delete_form_alter(&$form, $form_state, $form_id) {
  // Add submit handler to delete.
  $form['actions']['submit']['#submit'][] = 'contrib_del_redirect';
  // Retrieve current contributor from route parameter.
  $yabrm_contributor = \Drupal::routeMatch()->getParameter('yabrm_contributor')->id();
  // Add custom URL to cancel action. Routes to main contributor view.
  $form['actions']['cancel']['#url'] =
    Url::fromRoute('entity.yabrm_contributor.canonical', ['yabrm_contributor' => $yabrm_contributor]);
}

/**
 * Submit handler for yabrm_contributor_delete. Redirects to view after submit.
 */
function contrib_del_redirect(&$form, FormStateInterface $form_state) {
  $form_state->setRedirect('nbbib_core.contributors', ['filter' => 'all']);
}

/**
 * Adds a top priority handler to the 'submit' action of the specified form.
 */
function top_submit_handler(&$form, $handler) {
  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' && isset($form['actions'][$action]['#type']) &&
    $form['actions'][$action]['#type'] === 'submit') {
      array_unshift($form['actions'][$action]['#submit'], $handler);
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function nbbib_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Enable content revision by default.
  if (!empty($form['revision'])) {
    $form['revision']['#default_value'] = TRUE;
  }

  // Target all reference add/edit forms.
  $ref_forms = [
    'yabrm_book_add_form',
    'yabrm_book_edit_form',
    'yabrm_book_section_add_form',
    'yabrm_book_section_edit_form',
    'yabrm_thesis_add_form',
    'yabrm_thesis_edit_form',
    'yabrm_journal_article_add_form',
    'yabrm_journal_article_edit_form',
  ];

  // For all reference edit and add forms.
  if (in_array($form_id, $ref_forms)) {
    // Add a top priority submit handler.
    top_submit_handler($form, 'clr_blank_contribs');
    // Add after-build widget callback to remove text area help.
    $form['physical_description']['widget']['#after_build'][] = '_allowed_formats_remove_textarea_help';
    $form['abstract_note']['widget']['#after_build'][] = '_allowed_formats_remove_textarea_help';
    $form['extra']['widget']['#after_build'][] = '_allowed_formats_remove_textarea_help';
    $form['notes']['widget']['#after_build'][] = '_allowed_formats_remove_textarea_help';
    $form['notes_private']['widget']['#after_build'][] = '_allowed_formats_remove_textarea_help';
    // Add after-build widget callback to remove URL help text.
    $form['url']['widget']['#after_build'][] = '_remove_url_help';
  }

  $contrib_forms = [
    'yabrm_contributor_edit_form',
    'yabrm_contributor_add_form',
  ];

  if (in_array($form_id, $contrib_forms)) {
    // For contributor add and edit forms.
    $form['help'] = [
      '#type' => 'markup',
      '#markup' => '<p>Note: Contributor roles (author, editor, illustrator, ' .
      'etc) are set at the bibliographic reference level.</p>',
      '#weight' => '-10',
    ];

    // Add validation.
    $form['#validate'][] = 'validate_contrib_form';

    // Add after-build widget callback to remove text area help.
    $form['pic_caption']['widget']['#after_build'][] = '_allowed_formats_remove_textarea_help';
    $form['description']['widget']['#after_build'][] = '_allowed_formats_remove_textarea_help';

    // Remove default external URL field help text.
    $form['nble_url']['widget']['#after_build'][] = '_external_url_remove_default_help';
  }

  $archival_forms = [
    'yabrm_contributor_archival_edit_form',
    'yabrm_contributor_archival_add_form',
  ];

  if (in_array($form_id, $archival_forms)) {
    // Add after-build widget callback to remove text area help.
    $form['title']['widget']['#after_build'][] = '_allowed_formats_remove_textarea_help';
    $form['location']['widget']['#after_build'][] = '_allowed_formats_remove_textarea_help';
  };

  $slide_forms = [
    'node_nbbib_slide_edit_form',
    'node_nbbib_slide_form',
  ];

  if (in_array($form_id, $slide_forms)) {
    $help = "
      Enter a full Tide & Time URL to a contributor record or a bibliographic record, 
      eg. https://nbbib.lib.unb.ca/contributors/mccarthy-thandiwe
    ";
    $form['field_link_to']['widget'][0]['uri']['#description'] = $help;
  }
}

/**
 * After-build widget callback. Removes URL help text.
 */
function _remove_url_help($form_element, FormStateInterface $form_state) {
  $i = 0;

  // Remove description for all multi-value entries.
  while (isset($form_element[$i])) {
    unset($form_element[$i]['uri']['#description']);
    $i++;
  }

  return $form_element;
}

/**
 * After-build widget callback. Removes text area field help.
 */
function _allowed_formats_remove_textarea_help($form_element, FormStateInterface $form_state) {

  if (isset($form_element[0]['format'])) {
    // All this stuff is needed to hide the help text.
    unset($form_element[0]['format']['guidelines']);
    unset($form_element[0]['format']['help']);
    unset($form_element[0]['format']['#type']);
    unset($form_element[0]['format']['#theme_wrappers']);
    $form_element[0]['format']['format']['#access'] = FALSE;
  }

  return $form_element;
}

/**
 * After-build widget callback. Removes external URL default help text.
 */
function _external_url_remove_default_help($form_element, FormStateInterface $form_state) {
  // Remove external URL default help text (second item, index 1).
  unset($form_element[0]['uri']['#description']["#items"][1]);

  return $form_element;
}

/**
 * Custom validation handler for contributor form.
 */
function validate_contrib_form($element, &$form_state) {
  // Get updated contributor values.
  $first_name = $form_state->getValue('first_name')[0]['value'];
  $last_name = $form_state->getValue('last_name')[0]['value'];
  $institution_name = $form_state->getValue('institution_name')[0]['value'];

  // Validation rules and errors.
  if (empty($institution_name)) {
    if (empty($first_name) and empty($last_name)) {
      $form_state->setErrorByName('contributors', t('Either institution or individual names are required for contributors.'));
    }
    elseif (empty($first_name) or empty($last_name)) {
      $form_state->setErrorByName('contributors', t('Full names are required for individual contributors.'));
    }
  }
  elseif (!empty($last_name)) {
    $form_state->setErrorByName('contributors', t('Either institution or individual names are allowed for contributors. Not both.'));
  }
  elseif (!empty($first_name)) {
    $form_state->setErrorByName('contributors', t('Either institution or individual names are allowed for contributors. Not both.'));
  }
}

/**
 * Submit handler for references. Removes empty contributors before saving to avoid errors.
 */
function clr_blank_contribs(&$form, FormStateInterface $form_state) {
  $contribs = $form_state->getValue('contributors') ?? NULL;
  foreach ($contribs as $key => $contrib) {
    if ($key != 'add_more' and empty($contrib['subform']['field_yabrm_contributor_person']['entities'])) {
      if (is_int($key)) {
        unset($contribs[$key]);
      }
    }
  }

  $form_state->setValue('contributors', $contribs);
}

/**
 * Custom validation handler for contributor sub-form.
 */
function validate_contrib_subform($element, &$form_state) {
  $i = 0;

  // Get updated contributor values.
  while (!empty($form_state->getCompleteForm()['contributors']['widget'][$i]['subform']['field_yabrm_contributor_person']['widget']['entities'][0])) {
    $first_name = $form_state->getCompleteForm()['contributors']['widget'][$i]['subform']['field_yabrm_contributor_person']['widget']['entities'][0]['#entity']->getFirstName();
    $last_name = $form_state->getCompleteForm()['contributors']['widget'][$i]['subform']['field_yabrm_contributor_person']['widget']['entities'][0]['#entity']->getLastName();
    $institution_name = $form_state->getCompleteForm()['contributors']['widget'][$i]['subform']['field_yabrm_contributor_person']['widget']['entities'][0]['#entity']->getInstitutionName();
    $i++;
  }

  // Validation rules and errors.
  if (empty($institution_name)) {
    if (empty($first_name) and empty($last_name)) {
      $form_state->setErrorByName('contributors', t('Either institution or individual names are required for contributors.'));
    }
    elseif (empty($first_name) or empty($last_name)) {
      $form_state->setErrorByName('contributors', t('Full names are required for individual contributors.'));
    }
  }
  elseif (!empty($last_name)) {
    $form_state->setErrorByName('contributors', t('Either institution or individual names are allowed for contributors. Not both.'));
  }
  elseif (!empty($first_name)) {
    $form_state->setErrorByName('contributors', t('Either institution or individual names are allowed for contributors. Not both.'));
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function nbbib_core_inline_entity_form_entity_form_alter(&$entity_form, FormStateInterface $form_state) {
  if (str_contains($entity_form['#id'], 'contributors')) {
    $entity_form['#entity_builders'][] = 'update_names';
  }
}

/**
 * Update display and sort names on contributor IEF collapse.
 */
function update_names($entity_type, $entity, $entity_form, &$form_state) {
  if ($entity_type == "yabrm_contributor") {
    $first_name = $entity->getFirstName();
    $last_name = $entity->getLastName();
    $institution_name = $entity->getInstitutionName();
    $names = generate_names($first_name, $last_name, $institution_name);
    $entity->setName($names['name']);
    $entity->setSortName($names['sort_name']);
  }
}

/**
 * Generate display and sort names.
 */
function generate_names($first_name, $last_name, $institution_name) {
  $name = $sort_name = '';

  if (!empty($institution_name)) {
    if (!empty($first_name) or !empty($last_name)) {
      $name = $sort_name = 'ERROR: Contributor has both institution and individual names. Please review.';
    }
    else {
      $name = $institution_name;
      $sort_name = str_replace(['"',"'"], "", $institution_name);
    }
  }
  elseif (!empty($last_name)) {
    $name .= $last_name;
    $sort_name .= str_replace(['"',"'"], "", $last_name);

    if (!empty($first_name)) {
      $given_names = explode(' ', $first_name);

      if (!empty($given_names[1])) {
        $first_name = $given_names[0];
        $middle_init = substr($given_names[1], 0, 1);
        $name .= ", $first_name $middle_init.";
      }
      else {
        $name .= ", $first_name";
      }
    }
  }
  else {
    $name = $sort_name = 'ERROR: Contributor is missing one or more names. Please review.';
  }

  $names = [
    'name' => $name,
    'sort_name' => $sort_name,
  ];

  return $names;
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function nbbib_core_yabrm_contributor_presave(EntityInterface $entity) {
  // Populate name (display) and sort name on save.
  $first_name = trim($entity->getFirstName());
  $last_name = trim($entity->getLastName());
  $institution_name = $entity->getInstitutionName() ? trim($entity->getInstitutionName()) : NULL;
  $names = generate_names($first_name, $last_name, $institution_name);
  $entity->setName($names['name']);
  $entity->setSortName($names['sort_name']);
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function nbbib_core_user_insert(EntityInterface $entity) {
  // If user id 1 (Drupal special uli superuser), give contrib role.
  if($entity->id() == '1') {
    $entity->addRole('nb_bibliography_contributor');
    $entity->save();
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function nbbib_core_user_presave(EntityInterface $entity) {
  // If user id 1 (Drupal special uli superuser), give contrib roles.
  if($entity->id() == '1') {
    $entity->addRole('nb_bibliography_contributor');
    $entity->addRole('nbbib_archivals_editor');
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function nbbib_core_node_presave(EntityInterface $entity) {
  If ($entity->bundle() == "nbbib_slide") {
    $title = $entity->field_link_to->getValue()[0]['title'];
    $entity->set('title', $title);
  }
}

/**
* Implements hook_ENTITY_presave().
*/
function nbbib_core_entity_presave(EntityInterface $entity) {
  $types = [
    'yabrm_book',
    'yabrm_book_section',
    'yabrm_journal_article',
    'yabrm_thesis',
  ];
  
  // If updated entity has a bibliographic reference type...
  if (in_array($entity->bundle(), $types)) {
    // Publish contributors, topics, and archives if bibliographic reference becomes published.
    // If this is an update operation.
    if ($entity->original) {
      // Get original and new values.
      $pub_old = $entity->original->status->getValue()[0]['value'];
      $pub_new = $entity->status->getValue()[0]['value'];
      $year_old = $entity->original->publication_year->getValue()[0]['value'] ?? NULL;
      $contribs_old = array_column($entity->original->contributors->getValue(), 'target_id');
      $contribs_new = array_column($entity->contributors->getValue(), 'target_id');
      $contribs_diff = array_diff($contribs_old, $contribs_new);
      $contribs_xdif = array_diff($contribs_new, $contribs_old);
      $topics_old = array_column($entity->original->topics->getValue(), 'target_id');
      $topics_new = array_column($entity->topics->getValue(), 'target_id');
      $topics_xdif = array_diff($topics_new, $topics_old);
      $archives_old = array_column($entity->original->archive->getValue(), 'target_id');
      $archives_new = array_column($entity->archive->getValue(), 'target_id');
      $archives_xdif = array_diff($archives_new, $archives_old);
      
      // If the published status changed or contributors/topics/archives were added...
      if ($pub_old != $pub_new or !empty($contribs_xdif) or !empty($topics_xdif) or !empty($archives_xdif)) {
        // Get referenced contributor paragraphs.
        $paragraphs = $entity->contributors->getValue();
        
        // Iterate through paragraphs.
        foreach ($paragraphs as $paragraph) {
          // Load paragraph object.
          $pid = $paragraph['target_id'];
          $p_obj = Paragraph::load($pid);
          // If valid object...
          if ($p_obj) {
            // Update paragraph published status to reflect reference.
            $p_obj->set('status', $pub_new);
            // Save paragraph.
            $p_obj->save();
            
            // Get contributor id.
            $cid = $p_obj->field_yabrm_contributor_person->getValue()[0]['target_id'] ?? NULL;
            // Load contributor object.
            $c_obj = BibliographicContributor::load($cid) ?? NULL;
            
            // If valid object...
            if ($c_obj) {
              // If the reference was unpublished...
              if (!$pub_new) {
                // Check if contributor id is present in any published paragraphs.
                $par_storage = \Drupal::entityTypeManager()->getStorage('paragraph');
                $pids = $par_storage->getQuery()
                  ->condition('field_yabrm_contributor_person', $cid)
                  ->condition('status', TRUE)
                  ->accessCheck(FALSE)
                  ->execute();
                  
                  // If none found...
                  if (!count($pids)) {
                    // Unpublish contributor and save.
                    $c_obj->set('status', FALSE);
                    $c_obj->save();
                  }
              } else {
                // Publish contributor and save.
                $c_obj->set('status', TRUE);
                $c_obj->save();
              }
            }
          }
        }
        // Get referenced topics.
        $topics = $entity->topics->getValue();
        
        // Iterate through topics.
        foreach ($topics as $topic) {
          // Load term object.
          $tid = $topic['target_id'];
          $t_obj = Term::load($tid);
          // If valid object...
          if ($t_obj) {
            // Update term published status to reflect reference.
            $t_obj->set('status', $pub_new);
            // Save topic.
            $t_obj->save();
          }
        }
        // Get referenced archives.
        $archives = $entity->archive->getValue();
        
        // Iterate through archives.
        foreach ($archives as $archive) {
          // Load term object.
          $tid = $archive['target_id'];
          $t_obj = Term::load($tid);
          // If valid object...
          if ($t_obj) {
            // Update term published status to reflect reference.
            $t_obj->set('status', $pub_new);
            // Save archive.
            $t_obj->save();
          }
        }
      }
      // If the publication year changed...
      $year_new = $entity->publication_year->getValue()[0]['value'] ?? NULL;
      if ($year_new != 0 and $year_new != $year_old) {
        // Check/configure new edge values for facet.
        $config = \Drupal::service('config.factory')->getEditable('facets.facet.publication_year');
        $widget = $config->get('widget');
        $old_min = $widget['config']['min_value']; 
        if ($year_new < $old_min) {
          $widget['config']['min_value'] = $year_new;
        }
        $widget['config']['max_value'] = date('Y');
        $config->set('widget', $widget);
        $config->save();
      }
      // If the contributor list is SHORTER after reference update.
      if (!empty($contribs_diff)) {
        // Cycle through removed contributor paragraphs.
        foreach ($contribs_diff as $pid) {
          // Get contributor entity ID.
          $p_obj = Paragraph::load($pid);
          $cid = $p_obj->field_yabrm_contributor_person->getValue()[0]['target_id'] ?? NULL;
          $p_obj->delete();
          if ($cid) {
            // Fetch all references that point to the target contributor.
            $books = "
              SELECT entity_id
              FROM yabrm_book__contributors
              WHERE contributors_target_id IN (
                SELECT entity_id
                FROM paragraph__field_yabrm_contributor_person
                WHERE field_yabrm_contributor_person_target_id = $cid
                AND entity_id IN (
                  SELECT id
                  FROM paragraphs_item_field_data
                  WHERE status = 1
                )
              )
            ";
            $sections = "
              SELECT entity_id
              FROM yabrm_book_section__contributors
              WHERE contributors_target_id IN (
                SELECT entity_id
                FROM paragraph__field_yabrm_contributor_person
                WHERE field_yabrm_contributor_person_target_id = $cid
                AND entity_id IN (
                  SELECT id
                  FROM paragraphs_item_field_data
                  WHERE status = 1
                )
              )
            ";
            $articles = "
              SELECT entity_id
              FROM yabrm_journal_article__contributors
              WHERE contributors_target_id IN (
                SELECT entity_id
                FROM paragraph__field_yabrm_contributor_person
                WHERE field_yabrm_contributor_person_target_id = $cid
                AND entity_id IN (
                  SELECT id
                  FROM paragraphs_item_field_data
                  WHERE status = 1
                )
              )
            ";
            $theses = "
              SELECT entity_id
              FROM yabrm_thesis__contributors
              WHERE contributors_target_id IN (
                SELECT entity_id
                FROM paragraph__field_yabrm_contributor_person
                WHERE field_yabrm_contributor_person_target_id = $cid
                AND entity_id IN (
                  SELECT id
                  FROM paragraphs_item_field_data
                  WHERE status = 1
                )
              )
            ";
            $book_ids =
              array_column(\Drupal::database()->query($books)->fetchAll(), 'entity_id');
            $section_ids =
              array_column(\Drupal::database()->query($sections)->fetchAll(), 'entity_id');
            $article_ids =
              array_column(\Drupal::database()->query($articles)->fetchAll(), 'entity_id');
            $thesis_ids =
              array_column(\Drupal::database()->query($theses)->fetchAll(), 'entity_id');
            // If no published reference contributor paragraphs are associated to this contributor...
            if (empty($book_ids) and empty($section_ids) and empty($article_ids) and empty($thesis_ids)) {
              // Load contributor object.
              $c_obj = BibliographicContributor::load($cid) ?? NULL;
              // Unpublish contributor and save.
              $c_obj->set('status', FALSE);
              $c_obj->save();            
            }
          }
        }
      } 
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function nbbib_core_entity_insert(EntityInterface $entity) {
  if ($entity->bundle() != 'paragraph') {
    $entity_storage = \Drupal::entityTypeManager()->getStorage($entity->getEntityTypeId());
    $stored_entity = $entity_storage->load($entity->id());
    // Force pathauto generation on insert if the service is available.
    if (\Drupal::hasService('pathauto.generator')) {
      \Drupal::service('pathauto.generator')->updateEntityAlias($stored_entity, 'update');
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function nbbib_core_entity_update(EntityInterface $entity) {
  // If any entity updates but paragraphs...
  if ($entity->bundle() != 'paragraph') {
    $entity_storage = \Drupal::entityTypeManager()->getStorage($entity->getEntityTypeId());
    $stored_entity = $entity_storage->load($entity->id());
    // Force pathauto generation on update if the service is available.
    if (\Drupal::hasService('pathauto.generator')) {
      \Drupal::service('pathauto.generator')->updateEntityAlias($stored_entity, 'update');
    }

    // If contributor entity updates...
    if ($entity->bundle() == 'yabrm_contributor') {
      // Re-index associated references (updates citations).
      $cid = $entity->id();
      reindex_contrib_refs($cid);
    }

    // If collection entity updates...
    if ($entity->bundle() == 'yabrm_collection') {
      // Re-index associated references (updates citations).
      $cid = $entity->id();
      reindex_collection_refs($cid);
    }
  }
}

/**
* Implements hook_entity_delete().
*/
function nbbib_core_entity_delete(EntityInterface $entity) {
  // Delete orphan paragraphs on bibliographic reference delete.
  $types = [
    'yabrm_book',
    'yabrm_book_section',
    'yabrm_journal_article',
    'yabrm_thesis',
  ];

  // If deleted entity has a bibliographic reference type...
  if (in_array($entity->bundle(), $types)) {
    // Get contributors/roles (paragraphs).
    $contribs = $entity->contributors->getValue();

    // For each contributor paragraph...
    foreach ($contribs as $contrib) {
      // Load entity...
      $entity_storage = \Drupal::entityTypeManager()->getStorage('paragraph');
      $stored_entity = $entity_storage->load($contrib['target_id']);
      // And delete.
      if ($stored_entity) {
        $stored_entity->delete();
      }
    }
  }

  // If contributor entity updates...
  if ($entity->bundle() == 'yabrm_contributor') {
    // Re-index associated references (updates citations).
    $cid = $entity->id();
    reindex_contrib_refs($cid);
  }

  // If collection entity updates...
  if ($entity->bundle() == 'yabrm_collection') {
    // Re-index associated references (updates citations).
    $cid = $entity->id();
    reindex_collection_refs($cid);
  }
}

/**
 * Immediately reindex references associated with contributor id $cid.
 */
function reindex_contrib_refs($cid) {
  // Fetch all references that point to the target contributor.
  $books = "
    SELECT entity_id
    FROM yabrm_book__contributors
    WHERE contributors_target_id IN (
      SELECT entity_id
      FROM paragraph__field_yabrm_contributor_person
      WHERE field_yabrm_contributor_person_target_id = $cid
    )
  ";
  $sections = "
    SELECT entity_id
    FROM yabrm_book_section__contributors
    WHERE contributors_target_id IN (
      SELECT entity_id
      FROM paragraph__field_yabrm_contributor_person
      WHERE field_yabrm_contributor_person_target_id = $cid
    )
  ";
  $articles = "
    SELECT entity_id
    FROM yabrm_journal_article__contributors
    WHERE contributors_target_id IN (
      SELECT entity_id
      FROM paragraph__field_yabrm_contributor_person
      WHERE field_yabrm_contributor_person_target_id = $cid
    )
  ";
  $theses = "
    SELECT entity_id
    FROM yabrm_thesis__contributors
    WHERE contributors_target_id IN (
      SELECT entity_id
      FROM paragraph__field_yabrm_contributor_person
      WHERE field_yabrm_contributor_person_target_id = $cid
    )
  ";

  $book_ids =
    array_column(\Drupal::database()->query($books)->fetchAll(), 'entity_id');
  $section_ids =
    array_column(\Drupal::database()->query($sections)->fetchAll(), 'entity_id');
  $article_ids =
    array_column(\Drupal::database()->query($articles)->fetchAll(), 'entity_id');
  $thesis_ids =
    array_column(\Drupal::database()->query($theses)->fetchAll(), 'entity_id');
  $index = Index::load('references_nbbib_lib_unb_ca');
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $reindex = [];

  // For each reference id... create indexing id and add item to list.
  foreach ($book_ids as $book_id) {
    $item_id = 'entity:yabrm_book/' . $book_id . ':' . $language;
    $reindex[$item_id] = $index->loadItem($item_id);
  }
  foreach ($section_ids as $section_id) {
    $item_id = 'entity:yabrm_book_section/' . $section_id . ':' . $language;
    $reindex[$item_id] = $index->loadItem($item_id);
  }
  foreach ($article_ids as $article_id) {
    $item_id = 'entity:yabrm_journal_article/' . $article_id . ':' . $language;
    $reindex[$item_id] = $index->loadItem($item_id);
  }
  foreach ($thesis_ids as $thesis_id) {
    $item_id = 'entity:yabrm_thesis/' . $thesis_id . ':' . $language;
    $reindex[$item_id] = $index->loadItem($item_id);
  }

  // Reindex all in list.
  $index->indexSpecificItems($reindex);

  // Prepare confirmation message.
  $msg = "<b>Please wait a few seconds and refresh this page to see the
    updated list of citations.</b>";
  \Drupal::messenger()->addMessage(t($msg));
}

/**
 * Immediately reindex references associated with collection id $cid.
 */
function reindex_collection_refs($cid) {
  // Fetch all references that point to the target collection.
  $books = "
    SELECT entity_id
    FROM yabrm_book__collections
    WHERE collections_target_id = $cid
  ";
  $sections = "
    SELECT entity_id
    FROM yabrm_book_section__collections
    WHERE collections_target_id = $cid
  ";
  $articles = "
    SELECT entity_id
    FROM yabrm_journal_article__collections
    WHERE collections_target_id = $cid
  ";
  $theses = "
    SELECT entity_id
    FROM yabrm_thesis__collections
    WHERE collections_target_id = $cid
  ";

  $book_ids =
    array_column(\Drupal::database()->query($books)->fetchAll(), 'entity_id');
  $section_ids =
    array_column(\Drupal::database()->query($sections)->fetchAll(), 'entity_id');
  $article_ids =
    array_column(\Drupal::database()->query($articles)->fetchAll(), 'entity_id');
  $thesis_ids =
    array_column(\Drupal::database()->query($theses)->fetchAll(), 'entity_id');
  $index = Index::load('references_nbbib_lib_unb_ca');
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $reindex = [];

  // For each reference id... create indexing id and add item to list.
  foreach ($book_ids as $book_id) {
    $item_id = 'entity:yabrm_book/' . $book_id . ':' . $language;
    $reindex[$item_id] = $index->loadItem($item_id);
  }
  foreach ($section_ids as $section_id) {
    $item_id = 'entity:yabrm_book_section/' . $section_id . ':' . $language;
    $reindex[$item_id] = $index->loadItem($item_id);
  }
  foreach ($article_ids as $article_id) {
    $item_id = 'entity:yabrm_journal_article/' . $article_id . ':' . $language;
    $reindex[$item_id] = $index->loadItem($item_id);
  }
  foreach ($thesis_ids as $thesis_id) {
    $item_id = 'entity:yabrm_thesis/' . $thesis_id . ':' . $language;
    $reindex[$item_id] = $index->loadItem($item_id);
  }

  // Reindex all in list.
  $index->indexSpecificItems($reindex);

  // Prepare confirmation message.
  $msg = "<b>Please wait a few seconds to see the
    updated references.</b>";
  \Drupal::messenger()->addMessage(t($msg));
}

/**
 * Implements hook_views_pre_render().
 */
function nbbib_core_views_pre_render($view) {
  if (isset($view) && $view->id() == 'nb_bibliography_citations') {
    // Include current facets in view title.
    $active_facets = active_facet_page_title_get_active_facets();
    if (empty($active_facets)) {
      return;
    }
    $title = 'Search - ' . end($active_facets);
    // Set the view title.
    $view->setTitle($title);
    // Set the route title.
    $route = \Drupal::routeMatch()->getCurrentRouteMatch()->getRouteObject();
    $route->setDefault('_title', $title);  
  }

  if (isset($view) && $view->id() == 'nb_bibliography_contributors') {
    $view->element['#attached']['library'][] = 'nbbib_core/contrib-alpha-pager';
  }
}

/**
 * Gets an array of the active facets.
 */
function active_facet_page_title_get_active_facets() {
  /** @var \Drupal\facets\FacetManager\DefaultFacetManager $facetManager */
  $facetManager = \Drupal::service('facets.manager');
  $enabled_facets = $facetManager->getEnabledFacets();
  $items = [];
  foreach ($enabled_facets as $facet) {
    $processed = $facetManager->returnProcessedFacet($facet);
    if ($processed) {
      $facetManager->build($processed);
      $results = $processed->getResults();
      $active = $processed->getActiveItems();
      foreach ($results as $result) {
        if (in_array($result->getRawValue(), $active)) {
          $items[] = $result->getDisplayValue();
        }
      }
    }
  }

  return $items;
}

function nbbib_core_menu_local_tasks_alter(&$data, $route_name, RefinableCacheableDependencyInterface &$cacheability) {
  if ($data['tabs'] and is_array($data['tabs']) and str_contains(key(reset($data['tabs'])), 'entity.version_history:')) {
    array_shift($data['tabs'][0]);
  }
}

