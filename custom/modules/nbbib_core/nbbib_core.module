<?php

/**
 * @file
 * Contains nbbib_core.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\Core\Messenger\MessengerInterface;

/**
 * Implements hook_theme().
 */
function nbbib_core_theme($existing, $type, $theme, $path) {
  return [
    'nbbib_intro' => [
      'variables' => [],
    ],
    'nbbib_about' => [
      'variables' => [],
    ],
  ];
}

/**
 * Implements hook_page_attachments().
 */
function nbbib_core_page_attachments(array &$attachments) {
  if (!\Drupal::currentUser()->hasPermission('access toolbar')) {
    return;
  }

  $attachments['#attached']['library'][] = 'nbbib_core/toolbar-overrides';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nbbib_core_form_views_exposed_form_alter(&$form, $form_state, $form_id) {

  // Target specific exposed form (bibliography).
  if ($form['#id'] == "views-exposed-form-nb-bibliography-citations-page-1") {
    // Override bibliographic_type input to dropdown.
    $form['bibliographic_type']['#type'] = "select";
    $form['bibliographic_type']['#size'] = NULL;
    $form['bibliographic_type']['#validated'] = TRUE;

    $form['bibliographic_type']['#options'] = [
      '' => t('- Any -'),
      'Book' => t('Book'),
      'Book Section' => t('Book Section'),
      'Journal Article' => t('Journal Article'),
      'Thesis' => t('Thesis'),
    ];

    $form['bibliographic_type']['#default_value'] = 'All';

    // Override collections input to dropdown.
    $form['collections_5']['#type'] = "select";
    $form['collections_5']['#size'] = NULL;
    $form['collections_5']['#validated'] = TRUE;

    $form['collections_5']['#options'] = [
      '' => t('- Any -'),
    ];

    // Dynamically populate collection list.
    // Get collection storage, query for ids.
    $col_storage = \Drupal::entityTypeManager()->getStorage('yabrm_collection');
    $cids = $col_storage->getQuery()->execute();
    $collection = NULL;
    // Iterate through ids, append each collection name.
    foreach ($cids as $cid) {
      $collection = $col_storage->load($cid)->getName();
      $form['collections_5']['#options'][$collection] = t($collection);
    }

    $form['collections_5']['#default_value'] = 'All';

    // Override keyword and title input to increase max length.
    $form['search_api_fulltext']['#maxlength'] = 1024;
    $form['search_api_fulltext_title']['#maxlength'] = 1024;
  }

  if ($form['#id'] == "views-exposed-form-nb-bibliography-citations-page-2") {
    // Override keyword input to increase max length.
    $form['search_api_fulltext']['#maxlength'] = 1024;
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 * Overrides contrib delete/cancel redirects.
 */
function nbbib_core_form_yabrm_contributor_delete_form_alter(&$form, $form_state, $form_id) {
  // Add submit handler to delete.
  $form['actions']['submit']['#submit'][] = 'contrib_del_redirect';
  // Retrieve current contributor from route parameter.
  $yabrm_contributor = \Drupal::routeMatch()->getParameter('yabrm_contributor')->id();
  // Add custom URL to cancel action. Routes to main contributor view.
  $form['actions']['cancel']['#url'] =
    Url::fromRoute('entity.yabrm_contributor.canonical', ['yabrm_contributor' => $yabrm_contributor]);
}

/**
 * Submit handler for yabrm_contributor_delete. Redirects to view after submit.
 */
function contrib_del_redirect(&$form, FormStateInterface $form_state) {
  $form_state->setRedirect('nbbib_core.contributors', ['filter' => 'all']);
}

/**
 * Adds a top priority handler to the 'submit' action of the specified form.
 */
function top_submit_handler(&$form, $handler) {
  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' && isset($form['actions'][$action]['#type']) &&
    $form['actions'][$action]['#type'] === 'submit') {
      array_unshift($form['actions'][$action]['#submit'], $handler);
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function nbbib_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Enable content revision by default.
  if (!empty($form['new_revision'])) {
    $form['new_revision']['#default_value'] = TRUE;
  }
  elseif (!empty($form['revision'])) {
    $form['revision']['#default_value'] = TRUE;
  }

  // Target all reference add/edit forms.
  $ref_forms = [
    'yabrm_book_add_form',
    'yabrm_book_edit_form',
    'yabrm_book_section_add_form',
    'yabrm_book_section_edit_form',
    'yabrm_thesis_add_form',
    'yabrm_thesis_edit_form',
    'yabrm_journal_article_add_form',
    'yabrm_journal_article_edit_form',
  ];

  if (in_array($form_id, $ref_forms)) {
    // For all reference edit and add forms.
    // Add validation.
    $form['#validate'][] = 'validate_contrib_subform';
    // Add a top priority submit handler.
    top_submit_handler($form, 'clr_blank_contribs');
  }

  $contrib_forms = [
    'yabrm_contributor_edit_form',
    'yabrm_contributor_add_form',
  ];

  if (in_array($form_id, $contrib_forms)) {
    // For contributor add and edit forms.
    $form['help'] = [
      '#type' => 'markup',
      '#markup' => '<p>Note: Contributor roles (author, editor, illustrator, ' .
      'etc) are set at the bibliographic reference level.</p>',
      '#weight' => '-10',
    ];

    // Add validation.
    $form['#validate'][] = 'validate_contrib_form';
  }
}

/**
 * Custom validation handler for contributor form.
 */
function validate_contrib_form($element, &$form_state) {
  // Get updated contributor values.
  $first_name = $form_state->getValue('first_name')[0]['value'];
  $last_name = $form_state->getValue('last_name')[0]['value'];
  $institution_name = $form_state->getValue('institution_name')[0]['value'];

  // Validation rules and errors.
  if (empty($institution_name)) {
    if (empty($first_name) and empty($last_name)) {
      $form_state->setErrorByName('contributors', t('Either institution or individual names are required for contributors.'));
    }
    elseif (empty($first_name) or empty($last_name)) {
      $form_state->setErrorByName('contributors', t('Full names are required for individual contributors.'));
    }
  }
  elseif (!empty($last_name)) {
    $form_state->setErrorByName('contributors', t('Either institution or individual names are allowed for contributors. Not both.'));
  }
  elseif (!empty($first_name)) {
    $form_state->setErrorByName('contributors', t('Either institution or individual names are allowed for contributors. Not both.'));
  }
}

/**
 * Submit handler for yabrm_book_edit. Removes empty contributors before saving to avoid errors.
 */
function clr_blank_contribs(&$form, FormStateInterface $form_state) {
  $contribs = $form_state->getValue('contributors');

  foreach ($contribs as $key => $contrib) {
    if (empty($contrib['subform']['field_yabrm_contributor_person'])) {
      if (is_int($key)) {
        unset($contribs[$key]);
      }
    }
  }

  $form_state->setValue('contributors', $contribs);
}

/**
 * Custom validation handler for contributor sub-form.
 */
function validate_contrib_subform($element, &$form_state) {
  $i = 0;

  // Get updated contributor values.
  while (!empty($form_state->getCompleteForm()['contributors']['widget'][$i]['subform']['field_yabrm_contributor_person']['widget']['entities'][0])) {
    $first_name = $form_state->getCompleteForm()['contributors']['widget'][$i]['subform']['field_yabrm_contributor_person']['widget']['entities'][0]['#entity']->getFirstName();
    $last_name = $form_state->getCompleteForm()['contributors']['widget'][$i]['subform']['field_yabrm_contributor_person']['widget']['entities'][0]['#entity']->getLastName();
    $institution_name = $form_state->getCompleteForm()['contributors']['widget'][$i]['subform']['field_yabrm_contributor_person']['widget']['entities'][0]['#entity']->getInstitutionName();
    $i++;
  }

  // Validation rules and errors.
  if (empty($institution_name)) {
    if (empty($first_name) and empty($last_name)) {
      $form_state->setErrorByName('contributors', t('Either institution or individual names are required for contributors.'));
    }
    elseif (empty($first_name) or empty($last_name)) {
      $form_state->setErrorByName('contributors', t('Full names are required for individual contributors.'));
    }
  }
  elseif (!empty($last_name)) {
    $form_state->setErrorByName('contributors', t('Either institution or individual names are allowed for contributors. Not both.'));
  }
  elseif (!empty($first_name)) {
    $form_state->setErrorByName('contributors', t('Either institution or individual names are allowed for contributors. Not both.'));
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function nbbib_core_inline_entity_form_entity_form_alter(&$entity_form, FormStateInterface $form_state) {
  $entity_form['#entity_builders'][] = 'update_names';
}

/**
 * Update display and sort names on contributor IEF collapse.
 */
function update_names($entity_type, $entity, $entity_form, &$form_state) {
  $first_name = $entity->getFirstName();
  $last_name = $entity->getLastName();
  $institution_name = $entity->getInstitutionName();

  $names = generate_names($first_name, $last_name, $institution_name);

  $entity->setName($names['name']);
  $entity->setSortName($names['sort_name']);
}

/**
 * Generate display and sort names.
 */
function generate_names($first_name, $last_name, $institution_name) {
  $name = $sort_name = '';

  if (!empty($institution_name)) {
    if (!empty($first_name) or !empty($last_name)) {
      $name = $sort_name = 'Warning: Contributor has both institution and individual names. Please review.';
    }
    else {
      $name = $sort_name = $institution_name;
    }
  }
  elseif (!empty($last_name)) {
    $name .= $last_name;
    $sort_name .= $last_name;

    if (!empty($first_name)) {
      $given_names = explode(' ', $first_name);

      if (!empty($given_names[1])) {
        $first_name = $given_names[0];
        $middle_init = substr($given_names[1], 0, 1);
        $name .= ", $first_name $middle_init.";
      }
      else {
        $name .= ", $first_name";
      }
    }
  }
  else {
    $name = $sort_name = 'Warning: Contributor is missing one or more names. Please review.';
  }

  $names = [
    'name' => $name,
    'sort_name' => $sort_name,
  ];

  return $names;
}

/**
 * Implements hook_ENTITY_TYPE_ID_presave().
 */
function nbbib_core_yabrm_contributor_presave(EntityInterface $entity) {
  // Pupulate name (display) and sort name on save.
  $first_name = trim($entity->getFirstName());
  $last_name = trim($entity->getLastName());
  $institution_name = trim($entity->getInstitutionName());

  $names = generate_names($first_name, $last_name, $institution_name);

  $entity->setName($names['name']);
  $entity->setSortName($names['sort_name']);
}

/**
 * Implements hook_entity_insert().
 */
function nbbib_core_entity_insert(EntityInterface $entity) {
  $entity_storage = \Drupal::entityTypeManager()->getStorage($entity->getEntityTypeId());
  $stored_entity = $entity_storage->load($entity->id());
  // Force pathauto generation on insert if the service is available.
  if (\Drupal::hasService('pathauto.generator')) {
    \Drupal::service('pathauto.generator')->updateEntityAlias($stored_entity, 'update');
  }
}

/**
 * Implements hook_entity_update().
 */
function nbbib_core_entity_update(EntityInterface $entity) {
  $entity_storage = \Drupal::entityTypeManager()->getStorage($entity->getEntityTypeId());
  $stored_entity = $entity_storage->load($entity->id());
  // Force pathauto generation on update if the service is available.
  if (\Drupal::hasService('pathauto.generator')) {
    \Drupal::service('pathauto.generator')->updateEntityAlias($stored_entity, 'update');
  }
}

/**
 * Implements hook_views_pre_render().
 */
function nbbib_core_views_pre_render($view) {
  if ($view->id() == 'nb_bibliography_citations') {
    // Include current collection in view title.
    $token = !empty($view->getExposedInput()['collections_5']) ?
      $view->getExposedInput()['collections_5'] : NULL;

    if (!empty($token)) {
      $view->setTitle($view->getTitle() . ' - ' . $token);
    }
    // Include current topic in view title.
    $token = !empty($view->getExposedInput()['topic_names']) ?
      $view->getExposedInput()['topic_names'] : NULL;

    if (!empty($token)) {
      $view->setTitle($view->getTitle() . ' - ' . $token);
    }
  }
}
