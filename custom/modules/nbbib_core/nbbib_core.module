<?php

/**
 * @file
 * Contains nbbib_core.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Messenger\MessengerInterface;
use Drupal\Core\Queue\QueueFactory;
use Drupal\Core\Queue\QueueInterface;
use Drupal\Core\Url;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\search_api\Entity\Index;
use Drupal\taxonomy\Entity\Term;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\yabrm\Entity\BibliographicContributor;

/**
 * Implements hook_cron().
 */
function nbbib_core_cron() {
  // Get current hour.
  $current_hour = date('G');
  $current_minute = date('i');
  $datestamp = date('c');

  // If it's between 12:45-1am server time...
  //if ($current_hour) { // CRON DEV - RUN EVERY CRON
  if ($current_hour < 1 and $current_minute > 44) {
    \Drupal::logger('nbbib_core')->notice("NBBIB cleanup CRON job started at [$datestamp].");
    // Cleanup orphan contribustors.
    \Drupal::logger('nbbib_core')->notice("Starting orphan contributor cleanup...");
    // Get all contributor ids with no matching contributor paragraphs.
    $query = \Drupal::database()->query(
      'SELECT id
      FROM yabrm_contributor
      WHERE id NOT IN (SELECT field_yabrm_contributor_person_target_id FROM paragraph__field_yabrm_contributor_person)'
    );

    $contribs = $query->fetchAll();
    $contrib_no = count($contribs);

    // If orphans found...
    if ($contrib_no) {
      \Drupal::logger('nbbib_core')->notice("Found [$contrib_no] orphan contributors.");

      // Call contrib cleanup queue.
      /** @var QueueFactory $queue_factory */
      $queue_factory = \Drupal::service('queue');
      /** @var QueueInterface $queue */
      $queue = $queue_factory->get('contrib_cleanup');

      // Pass each contrib id to cleanup queue.
      foreach ($contribs as $contrib) {
        $item = new \stdClass();
        $item->cid = $contrib->id;
        $queue->createItem($item);
      }
    }
    else {
      \Drupal::logger('nbbib_core')->notice("No orphan contributors found.");
    }

    // Cleanup orphan topics.
    \Drupal::logger('nbbib_core')->notice("Starting orphan topic term cleanup...");
    $query = \Drupal::database()->query(
      "SELECT tid
      FROM taxonomy_term_field_data
      WHERE vid = 'yabrm_reference_topic'
      AND tid NOT IN (SELECT topics_target_id FROM yabrm_book__topics)
      AND tid NOT IN (SELECT topics_target_id FROM yabrm_book_section__topics)
      AND tid NOT IN (SELECT topics_target_id FROM yabrm_journal_article__topics)
      AND tid NOT IN (SELECT topics_target_id FROM yabrm_thesis__topics)"
    );

    $topics = $query->fetchAll();
    $topic_no = count($topics);

    // If orphans found...
    if ($topic_no) {
      \Drupal::logger('nbbib_core')->notice("Found [$topic_no] orphan topics.");

      // Call topics cleanup queue.
      /** @var QueueFactory $queue_factory */
      $queue_factory = \Drupal::service('queue');
      /** @var QueueInterface $queue */
      $queue = $queue_factory->get('topic_cleanup');

      // Pass each contrib id to cleanup queue.
      foreach ($topics as $topic) {
        $item = new \stdClass();
        $item->tid = $topic->tid;
        $queue->createItem($item);
      }
    }
    else {
      \Drupal::logger('nbbib_core')->notice("No orphan topics found.");
    }

    // Cleanup orphan archives.
    \Drupal::logger('nbbib_core')->notice("Starting orphan archive term cleanup...");
    $query = \Drupal::database()->query(
      "SELECT tid
      FROM taxonomy_term_field_data
      WHERE vid = 'nbbib_archives'
      AND tid NOT IN (SELECT archive_target_id FROM yabrm_book__archive)
      AND tid NOT IN (SELECT archive_target_id FROM yabrm_book_section__archive)
      AND tid NOT IN (SELECT archive_target_id FROM yabrm_journal_article__archive)
      AND tid NOT IN (SELECT archive_target_id FROM yabrm_thesis__archive)"
    );

    $archives = $query->fetchAll();
    $archive_no = count($archives);

    // If orphans found...
    if ($archive_no) {
      \Drupal::logger('nbbib_core')->notice("Found [$archive_no] orphan archives.");

      // Call topics cleanup queue.
      /** @var QueueFactory $queue_factory */
      $queue_factory = \Drupal::service('queue');
      /** @var QueueInterface $queue */
      $queue = $queue_factory->get('archive_cleanup');

      // Pass each contrib id to cleanup queue.
      foreach ($archives as $archive) {
        $item = new \stdClass();
        $item->tid = $archive->tid;
        $queue->createItem($item);
      }
    }
    else {
      \Drupal::logger('nbbib_core')->notice("No orphan archives found.");
    }
  }
  else {
    \Drupal::logger('nbbib_core')->notice("No cleanup tasks ran at this time.");
  }
}

/**
 * Implements hook_theme().
 */
function nbbib_core_theme($existing, $type, $theme, $path) {
  return [
    'nbbib_intro' => [
      'variables' => [],
    ],
    'nbbib_about' => [
      'variables' => [],
    ],
  ];
}

/**
 * Implements hook_page_attachments().
 */
function nbbib_core_page_attachments(array &$attachments) {
  if (!\Drupal::currentUser()->hasPermission('access toolbar')) {
    return;
  }

  $attachments['#attached']['library'][] = 'nbbib_core/toolbar-overrides';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nbbib_core_form_views_exposed_form_alter(&$form, $form_state, $form_id) {

  // Target specific exposed form (bibliography).
  if ($form['#id'] == "views-exposed-form-nb-bibliography-citations-page-1" or
    $form['#id'] == "views-exposed-form-nb-bibliography-lister-page-1") {
    // Override bibliographic_type input to dropdown.
    $form['bibliographic_type']['#type'] = "select";
    $form['bibliographic_type']['#size'] = NULL;
    $form['bibliographic_type']['#validated'] = TRUE;

    $form['bibliographic_type']['#options'] = [
      '' => t('- Any -'),
      'Book' => t('Book'),
      'Book Section' => t('Book Section'),
      'Journal Article' => t('Journal Article'),
      'Thesis' => t('Thesis'),
    ];

    $form['bibliographic_type']['#default_value'] = 'All';

    // Override collections input to dropdown.
    $form['collections_5']['#type'] = "select";
    $form['collections_5']['#size'] = NULL;
    $form['collections_5']['#validated'] = TRUE;

    $form['collections_5']['#options'] = [
      '' => t('- Any -'),
    ];

    // Dynamically populate collection list.
    // Get collection storage, query for ids.
    $col_storage = \Drupal::entityTypeManager()->getStorage('yabrm_collection');
    $cids = $col_storage->getQuery()->execute();
    $collection = NULL;
    // Iterate through ids, append each collection name.
    foreach ($cids as $cid) {
      $collection = $col_storage->load($cid)->getName();
      $form['collections_5']['#options'][$collection] = t($collection);
    }

    $form['collections_5']['#default_value'] = 'All';

    // Override keyword and title input to increase max length.
    $form['search_api_fulltext']['#maxlength'] = 1024;
    $form['search_api_fulltext_title']['#maxlength'] = 1024;
  }

  if ($form['#id'] == "views-exposed-form-nb-bibliography-citations-page-2") {
    // Override keyword input to increase max length.
    $form['search_api_fulltext']['#maxlength'] = 1024;
  }

  if ($form['#id'] == "views-exposed-form-nb-bibliography-lister-page-1") {
    // Override published input for better readability.
    $form['published']['#options']['1'] = 'Yes';
    $form['published']['#options']['0'] = 'No';
  }

}

/**
 * Implements hook_views_query_alter().
 * Adds published filter for contributors view only if user is not editor.
 */

function nbbib_core_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  try {
    $userCurrent = \Drupal::currentUser();
    $uid = $userCurrent->id();
    // For non-editor users…
    if($view->id() === 'nb_bibliography_citations' and $view->getTitle() === 'page_3' and !$userCurrent->hasRole('nb_bibliography_contributor')) {
      // …add a WHERE condition to only display published content.
      $query->addWhere(0, 'status', TRUE);
    }
  }
  catch(Error $e) {
    drupal_set_message('The server encountered a problem. Please contact the site\'s administrator.', 'error');
    \Drupal::logger('nbbib_core')->error("Error adding filter to view in nbbib_core.module : %e",
      ['%e' => $e]
    );
    return;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Overrides contrib delete/cancel redirects.
 */
function nbbib_core_form_yabrm_contributor_delete_form_alter(&$form, $form_state, $form_id) {
  // Add submit handler to delete.
  $form['actions']['submit']['#submit'][] = 'contrib_del_redirect';
  // Retrieve current contributor from route parameter.
  $yabrm_contributor = \Drupal::routeMatch()->getParameter('yabrm_contributor')->id();
  // Add custom URL to cancel action. Routes to main contributor view.
  $form['actions']['cancel']['#url'] =
    Url::fromRoute('entity.yabrm_contributor.canonical', ['yabrm_contributor' => $yabrm_contributor]);
}

/**
 * Submit handler for yabrm_contributor_delete. Redirects to view after submit.
 */
function contrib_del_redirect(&$form, FormStateInterface $form_state) {
  $form_state->setRedirect('nbbib_core.contributors', ['filter' => 'all']);
}

/**
 * Adds a top priority handler to the 'submit' action of the specified form.
 */
function top_submit_handler(&$form, $handler) {
  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' && isset($form['actions'][$action]['#type']) &&
    $form['actions'][$action]['#type'] === 'submit') {
      array_unshift($form['actions'][$action]['#submit'], $handler);
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function nbbib_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#after_build'][] = 'sort_rev_widgets';
  // Enable content revision by default.
  if (!empty($form['revision'])) {
    $form['revision']['#default_value'] = TRUE;
  }

  // Remove revision log default value.
  if (!empty($form['revision_log'])) {
    $form['revision_log']['widget'][0]['value']['#default_value'] = NULL;
  }

  // Target all reference add/edit forms.
  $ref_forms = [
    'yabrm_book_add_form',
    'yabrm_book_edit_form',
    'yabrm_book_section_add_form',
    'yabrm_book_section_edit_form',
    'yabrm_thesis_add_form',
    'yabrm_thesis_edit_form',
    'yabrm_journal_article_add_form',
    'yabrm_journal_article_edit_form',
  ];

  if (in_array($form_id, $ref_forms)) {
    // For all reference edit and add forms.
    // Add contributor validation.
    // $form['#validate'][] = 'validate_contrib_subform';
    // Add a top priority submit handler.
    top_submit_handler($form, 'clr_blank_contribs');
  }

  $contrib_forms = [
    'yabrm_contributor_edit_form',
    'yabrm_contributor_add_form',
  ];

  if (in_array($form_id, $contrib_forms)) {
    // For contributor add and edit forms.
    $form['help'] = [
      '#type' => 'markup',
      '#markup' => '<p>Note: Contributor roles (author, editor, illustrator, ' .
      'etc) are set at the bibliographic reference level.</p>',
      '#weight' => '-10',
    ];

    // Add validation.
    $form['#validate'][] = 'validate_contrib_form';
  }
}

/**
 * Implements hook_form_alter().
 */
function sort_rev_widgets($form, FormStateInterface $form_state) {
  $form['new_revision']['#weight'] = $form['actions']['#weight'] -2;
  $form['revision']['#weight'] = $form['actions']['#weight'] -2;;
  $form['revision_log']['#weight'] = $form['actions']['#weight'] -1;;

  return $form;
}

/**
 * Custom validation handler for contributor form.
 */
function validate_contrib_form($element, &$form_state) {
  // Get updated contributor values.
  $first_name = $form_state->getValue('first_name')[0]['value'];
  $last_name = $form_state->getValue('last_name')[0]['value'];
  $institution_name = $form_state->getValue('institution_name')[0]['value'];

  // Validation rules and errors.
  if (empty($institution_name)) {
    if (empty($first_name) and empty($last_name)) {
      $form_state->setErrorByName('contributors', t('Either institution or individual names are required for contributors.'));
    }
    elseif (empty($first_name) or empty($last_name)) {
      $form_state->setErrorByName('contributors', t('Full names are required for individual contributors.'));
    }
  }
  elseif (!empty($last_name)) {
    $form_state->setErrorByName('contributors', t('Either institution or individual names are allowed for contributors. Not both.'));
  }
  elseif (!empty($first_name)) {
    $form_state->setErrorByName('contributors', t('Either institution or individual names are allowed for contributors. Not both.'));
  }
}

/**
 * Submit handler for yabrm_book_edit. Removes empty contributors before saving to avoid errors.
 */
function clr_blank_contribs(&$form, FormStateInterface $form_state) {
  $contribs = $form_state->getValue('contributors') ?? NULL;

  foreach ($contribs as $key => $contrib) {
    if (empty($contrib['subform']['field_yabrm_contributor_person'])) {
      if (is_int($key)) {
        unset($contribs[$key]);
      }
    }
  }

  $form_state->setValue('contributors', $contribs);
}

/**
 * Custom validation handler for contributor sub-form.
 */
function validate_contrib_subform($element, &$form_state) {
  $i = 0;

  // Get updated contributor values.
  while (!empty($form_state->getCompleteForm()['contributors']['widget'][$i]['subform']['field_yabrm_contributor_person']['widget']['entities'][0])) {
    $first_name = $form_state->getCompleteForm()['contributors']['widget'][$i]['subform']['field_yabrm_contributor_person']['widget']['entities'][0]['#entity']->getFirstName();
    $last_name = $form_state->getCompleteForm()['contributors']['widget'][$i]['subform']['field_yabrm_contributor_person']['widget']['entities'][0]['#entity']->getLastName();
    $institution_name = $form_state->getCompleteForm()['contributors']['widget'][$i]['subform']['field_yabrm_contributor_person']['widget']['entities'][0]['#entity']->getInstitutionName();
    $i++;
  }

  // Validation rules and errors.
  if (empty($institution_name)) {
    if (empty($first_name) and empty($last_name)) {
      $form_state->setErrorByName('contributors', t('Either institution or individual names are required for contributors.'));
    }
    elseif (empty($first_name) or empty($last_name)) {
      $form_state->setErrorByName('contributors', t('Full names are required for individual contributors.'));
    }
  }
  elseif (!empty($last_name)) {
    $form_state->setErrorByName('contributors', t('Either institution or individual names are allowed for contributors. Not both.'));
  }
  elseif (!empty($first_name)) {
    $form_state->setErrorByName('contributors', t('Either institution or individual names are allowed for contributors. Not both.'));
  }
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function nbbib_core_inline_entity_form_entity_form_alter(&$entity_form, FormStateInterface $form_state) {
  $entity_form['#entity_builders'][] = 'update_names';
}

/**
 * Update display and sort names on contributor IEF collapse.
 */
function update_names($entity_type, $entity, $entity_form, &$form_state) {
  $first_name = $entity->getFirstName();
  $last_name = $entity->getLastName();
  $institution_name = $entity->getInstitutionName();
  $names = generate_names($first_name, $last_name, $institution_name);
  $entity->setName($names['name']);
  $entity->setSortName($names['sort_name']);
}

/**
 * Generate display and sort names.
 */
function generate_names($first_name, $last_name, $institution_name) {
  $name = $sort_name = '';

  if (!empty($institution_name)) {
    if (!empty($first_name) or !empty($last_name)) {
      $name = $sort_name = 'ERROR: Contributor has both institution and individual names. Please review.';
    }
    else {
      $name = $sort_name = $institution_name;
    }
  }
  elseif (!empty($last_name)) {
    $name .= $last_name;
    $sort_name .= $last_name;

    if (!empty($first_name)) {
      $given_names = explode(' ', $first_name);

      if (!empty($given_names[1])) {
        $first_name = $given_names[0];
        $middle_init = substr($given_names[1], 0, 1);
        $name .= ", $first_name $middle_init.";
      }
      else {
        $name .= ", $first_name";
      }
    }
  }
  else {
    $name = $sort_name = 'ERROR: Contributor is missing one or more names. Please review.';
  }

  $names = [
    'name' => $name,
    'sort_name' => $sort_name,
  ];

  return $names;
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function nbbib_core_yabrm_contributor_presave(EntityInterface $entity) {
  // Pupulate name (display) and sort name on save.
  $first_name = trim($entity->getFirstName());
  $last_name = trim($entity->getLastName());
  $institution_name = trim($entity->getInstitutionName());
  $names = generate_names($first_name, $last_name, $institution_name);
  $entity->setName($names['name']);
  $entity->setSortName($names['sort_name']);
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function nbbib_core_user_insert(EntityInterface $entity) {
  // If user id 1 (Drupal special uli superuser), give contrib role.
  if($entity->id() == '1') {
    $entity->addRole('nb_bibliography_contributor');
    $entity->save();
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function nbbib_core_user_presave(EntityInterface $entity) {
  // If user id 1 (Drupal special uli superuser), give contrib role.
  if($entity->id() == '1') {
    $entity->addRole('nb_bibliography_contributor');
  }
}

/**
* Implements hook_ENTITY_presave().
*/
function nbbib_core_entity_presave(EntityInterface $entity) {
  // Publish contributors if bibliographic reference becomes published.
  $types = [
    'yabrm_book',
    'yabrm_book_section',
    'yabrm_journal_article',
    'yabrm_thesis',
  ];

  // If updated entity has a bibliographic reference type...
  if (in_array($entity->bundle(), $types)) {
    // If this is an update operation.
    if ($entity->original) {
      // Get original and new published (status) values.
      $pub_old = $entity->original->status->getValue()[0]['value'];
      $pub_new = $entity->status->getValue()[0]['value'];

      // If the published status changed...
      if ($pub_old != $pub_new) {
        // Get referenced contributor paragraphs.
        $paragraphs = $entity->contributors->getValue();

        // Iterate through paragraphs.
        foreach ($paragraphs as $paragraph) {
          // Load paragraph object.
          $pid = $paragraph['target_id'];
          $p_obj = Paragraph::load($pid);
          // If valid object...
          if ($p_obj) {
            // Update paragraph published status to reflect reference.
            $p_obj->set('status', $pub_new);
            // Save paragraph.
            $p_obj->save();

            // Get contributor id.
            $cid = $p_obj->field_yabrm_contributor_person->getValue()[0]['target_id'];
            // Load paragraph object.
            $c_obj = BibliographicContributor::load($cid);

            // If valid object...
            if ($c_obj) {
              // If the reference was unpublished...
              if (!$pub_new) {
                // Check if contributor id is present in any published paragraphs.
                $par_storage = \Drupal::entityTypeManager()->getStorage('paragraph');
                $pids = $par_storage->getQuery()
                  ->condition('field_yabrm_contributor_person', $cid)
                  ->condition('status', TRUE)
                  ->execute();

                // If none found...
                if (!count($pids)) {
                  // Unpublish contributor and save.
                  $c_obj->set('status', FALSE);
                  $c_obj->save();
                }
              } else {
                // Publish contributor and save.
                $c_obj->set('status', TRUE);
                $c_obj->save();
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function nbbib_core_entity_insert(EntityInterface $entity) {
  if ($entity->bundle() != 'paragraph') {
    $entity_storage = \Drupal::entityTypeManager()->getStorage($entity->getEntityTypeId());
    $stored_entity = $entity_storage->load($entity->id());
    // Force pathauto generation on insert if the service is available.
    if (\Drupal::hasService('pathauto.generator')) {
      \Drupal::service('pathauto.generator')->updateEntityAlias($stored_entity, 'update');
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function nbbib_core_entity_update(EntityInterface $entity) {
  // If any entity updates but paragraphs...
  if ($entity->bundle() != 'paragraph') {
    $entity_storage = \Drupal::entityTypeManager()->getStorage($entity->getEntityTypeId());
    $stored_entity = $entity_storage->load($entity->id());
    // Force pathauto generation on update if the service is available.
    if (\Drupal::hasService('pathauto.generator')) {
      \Drupal::service('pathauto.generator')->updateEntityAlias($stored_entity, 'update');
    }

    // If contributor entity updates...
    if ($entity->bundle() == 'yabrm_contributor') {
      // Re-index associated references (updates citations).
      $cid = $entity->id();
      reindex_contrib_refs($cid);
    }
  }
}

/**
* Implements hook_entity_delete().
*/
function nbbib_core_entity_delete(EntityInterface $entity) {
  // Delete orphan paragraphs on bibliographic reference delete.
  $types = [
    'yabrm_book',
    'yabrm_book_section',
    'yabrm_journal_article',
    'yabrm_thesis',
  ];

  // If deleted entity has a bibliographic reference type...
  if (in_array($entity->bundle(), $types)) {
    // Get contributors/roles (paragraphs).
    $contribs = $entity->contributors->getValue();

    // For each contributor paragraph...
    foreach ($contribs as $contrib) {
      // Load entity...
      $entity_storage = \Drupal::entityTypeManager()->getStorage('paragraph');
      $stored_entity = $entity_storage->load($contrib['target_id']);
      // And delete.
      if ($stored_entity) {
        $stored_entity->delete();
      }
    }
  }

  // If contributor entity updates...
  if ($entity->bundle() == 'yabrm_contributor') {
    // Re-index associated references (updates citations).
    $cid = $entity->id();
    reindex_contrib_refs($cid);
  }
}

/**
 * Immediately reindex references associated with contributor id $cid.
 */
function reindex_contrib_refs($cid) {
  // Fetch all references that point to the target contributor.
  $books = "
    SELECT entity_id
    FROM yabrm_book__contributors
    WHERE contributors_target_id IN (
      SELECT entity_id
      FROM paragraph__field_yabrm_contributor_person
      WHERE field_yabrm_contributor_person_target_id = $cid
    )
  ";
  $sections = "
    SELECT entity_id
    FROM yabrm_book_section__contributors
    WHERE contributors_target_id IN (
      SELECT entity_id
      FROM paragraph__field_yabrm_contributor_person
      WHERE field_yabrm_contributor_person_target_id = $cid
    )
  ";
  $articles = "
    SELECT entity_id
    FROM yabrm_journal_article__contributors
    WHERE contributors_target_id IN (
      SELECT entity_id
      FROM paragraph__field_yabrm_contributor_person
      WHERE field_yabrm_contributor_person_target_id = $cid
    )
  ";
  $theses = "
    SELECT entity_id
    FROM yabrm_thesis__contributors
    WHERE contributors_target_id IN (
      SELECT entity_id
      FROM paragraph__field_yabrm_contributor_person
      WHERE field_yabrm_contributor_person_target_id = $cid
    )
  ";

  $book_ids =
    array_column(\Drupal::database()->query($books)->fetchAll(), 'entity_id');
  $section_ids =
    array_column(\Drupal::database()->query($sections)->fetchAll(), 'entity_id');
  $article_ids =
    array_column(\Drupal::database()->query($articles)->fetchAll(), 'entity_id');
  $thesis_ids =
    array_column(\Drupal::database()->query($theses)->fetchAll(), 'entity_id');
  $index = Index::load('references_nbbib_lib_unb_ca');
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $reindex = [];

  // For each reference id... create indexing id and add item to list.
  foreach ($book_ids as $book_id) {
    $item_id = 'entity:yabrm_book/' . $book_id . ':' . $language;
    $reindex[$item_id] = $index->loadItem($item_id);
  }
  foreach ($section_ids as $section_id) {
    $item_id = 'entity:yabrm_book_section/' . $section_id . ':' . $language;
    $reindex[$item_id] = $index->loadItem($item_id);
  }
  foreach ($article_ids as $article_id) {
    $item_id = 'entity:yabrm_journal_article/' . $article_id . ':' . $language;
    $reindex[$item_id] = $index->loadItem($item_id);
  }
  foreach ($thesis_ids as $thesis_id) {
    $item_id = 'entity:yabrm_thesis/' . $thesis_id . ':' . $language;
    $reindex[$item_id] = $index->loadItem($item_id);
  }

  // Reindex all in list.
  $index->indexSpecificItems($reindex);

  // Prepare confirmation message.
  $msg = "<b>Please wait a few seconds and refresh this page to see the
    uptaded list of citations.</b>";
  \Drupal::messenger()->addMessage(t($msg));
}

/**
 * Implements hook_views_pre_render().
 */
function nbbib_core_views_pre_render($view) {
  if ($view->id() == 'nb_bibliography_citations') {
    // Include current collection in view title.
    $token = !empty($view->getExposedInput()['collections_5']) ?
      $view->getExposedInput()['collections_5'] : NULL;

    if (!empty($token)) {
      $view->setTitle($view->getTitle() . ' - ' . $token);
    }
    // Include current topic in view title.
    $token = !empty($view->getExposedInput()['topic_names']) ?
      $view->getExposedInput()['topic_names'] : NULL;

    if (!empty($token)) {
      $view->setTitle($view->getTitle() . ' - ' . $token);
    }
  }
}
